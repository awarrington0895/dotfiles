" Multicursor
set multiple-cursors

" ----------- Options -----------
let mapleader = ' '
let maplocalleader = ' '

let g:highlightedyank_highlight_duration = "300"

set scrolloff=10
set number relativenumber
set showcmd
set visualbell
set incsearch
set ignorecase
set smartcase
set functiontextobj
set clipboard+=unnamed

" Don't use Ex mode, use Q for formatting.
map Q gq

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
" Highlight copied text
Plug 'machakann/vim-highlightedyank'

" Commentary plugin
Plug 'tpope/vim-commentary'

" Replace with register
Plug 'vim-scripts/ReplaceWithRegister'

" Nerdtree
set nerdtree

" EasyMotion
set easymotion

" WhichKey
set which-key
set notimeout

" ----------- Remaps -----------
" Finders
map <leader>ff <Action>(GotoClass)
map <leader>sf <Action>(GotoFile)
map <leader>j <Plug>(easymotion-s)

" Harpoon
map <leader>h <Action>(HarpoonerAddFile)
map <leader>H <Action>(HarpoonerToggleQuickMenu)
map <A-j> <Action>(HarpoonerOpenFile0)
map <A-k> <Action>(HarpoonerOpenFile1)
map <A-l> <Action>(HarpoonerOpenFile2)
map <A-;> <Action>(HarpoonerOpenFile3)

" Splits
map <leader>wl <Action>(SplitVertically)
map <leader>wj <Action>(SplitHorizontally)
map <leader>wo <Action>(Unsplit)

let g:WhichKeyDesc_splits = "<leader>w Split"
let g:WhichKeyDesc_split_vertical = "<leader>wl Split Vertically"
let g:WhichKeyDesc_split_horizontal = "<leader>wj Split Horizontally"
let g:WhichKeyDesc_unsplit = "<leader>wo Unsplit"

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_rename_element = "<leader>rn Rename Element"
let g:WhichKeyDesc_extract_method = "<leader>rm Extract Method"
let g:WhichKeyDesc_rename_element = "<leader>rv IntroduceVariable"
let g:WhichKeyDesc_rename_element = "<leader>rf IntroduceField"
let g:WhichKeyDesc_rename_element = "<leader>rs ChangeSignature"
let g:WhichKeyDesc_rename_element = "<leader>rr Refactorings.QuickListPopupAction"

" Context Actions
map <leader>am <Action>(ShowIntentionActions)
map <leader>q <Action>(CloseContent)
let g:WhichKeyDesc_show_intention_actions =  "<leader>am Show Intention Actions"

" Executive Actions
map \R <Action>(RunClass)
map \r <Action>(Run)
map \d <Action>(Debug)
map \vr <Action>(IdeaVim.ReloadVimRc.reload)

let g:WhichKeyDesc_run_class =  "\\R RunClass"
let g:WhichKeyDesc_run =  "\\r Run"
let g:WhichKeyDesc_debug =  "\\d Debug"
let g:WhichKeyDesc_reload_vimrc =  "\\vr Reload vimrc"

" Toggles
map \tz <Action>(ToggleZenMode)
map \tw <Action>(EditorToggleUseSoftWraps)
let g:WhichKeyDesc_toggles = "\\t Toggle"
let g:WhichKeyDesc_zen_mode = "\\tz Zen mode"
let g:WhichKeyDesc_toggle_wrap = "\\tw Word wrap"

" Easier page navigation
map <C-d> <C-d>zz
map <C-u> <C-u>zz
map <C-k> <Action>(MethodUp)
map <C-j> <Action>(MethodDown)
nmap gl $
nmap gh ^
vmap gl $
vmap gh ^

" Multiple cursor
nmap <C-n> <Plug>NextWholeOccurrence
vmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
vmap g<C-n> <Plug>NextOccurrence
vmap <C-x> <Plug>SkipOccurrence
vmap <C-p> <Plug>RemoveOccurrence
nmap <leader><C-n> <Plug>AllWholeOccurrences
vmap <leader><C-n> <Plug>AllWholeOccurrences
nmap <leader>g<C-n> <Plug>AllOccurrences
vmap <leader>g<C-n> <Plug>AllOccurrences

" Misc
vmap <leader>R "+p
let g:WhichKeyDesc_visual_replace_in_reg = "<leader>R Replace in register"

vmap / <Esc>/\\%V

nmap <leader>p "+p
nmap <leader>P "+P

map <leader>c <Action>(CommentByLineComment)

map <leader>e :NERDTreeToggle<CR>

imap jj <Esc>

map <leader>x <Action>(HideSideWindows)

" Create new lines without entering insert mode
map <leader>o o<Esc>k
map <leader>O O<Esc>j

